#!/usr/bin/ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
begin
  require 'rubygems'
  require 'bundler/setup'
rescue Exception => e
end

require 'rubygems'
require 'thor'
require 'right_aws'

class Rdsadmin < Thor
  RDS = RightAws::RdsInterface.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY'])

  #-----------------------------------------------------------------
  # Short cuts
  #-----------------------------------------------------------------

  desc "ls_insts", "list db instances"
  def ls_insts
    RDS.describe_db_instances.each { |entry|
      puts entry[:aws_id]
    }
  end

  desc "ls_snaps", "list db snapshots"
  def ls_snaps
    RDS.describe_db_snapshots.each { |entry|
      puts entry[:aws_id]
    }
  end

  desc "ls_param_groups", "list db parameter groups"
  def ls_param_groups
    RDS.describe_db_parameter_groups.each { |entry|
      puts entry[:name]
    }
  end

  desc "ls_params", "list db parameters"
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  def ls_params
    RDS.describe_db_parameters(options[:db_parameter_group_name]).each { |entry|
      puts "#{entry[:name]} = #{entry[:value]}"
    }
  end

  desc "ls_security_groups", "list db security groups"
  def ls_security_groups
    RDS.describe_db_security_groups().each { |entry|
      puts entry[:name]
    }
  end

  # --------------------------------------------
  #  DB Instances
  # --------------------------------------------

  desc 'describe_db_instances', 'describe db instances'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id'
  def describe_db_instances
    dump(RDS.describe_db_instances(options[:aws_id]))
  end

  desc 'create_db_instance', 'create_db_instance'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  method_option :master_username, :aliases => '-u', :type => :string, :desc => 'master_username', :required => true
  method_option :master_user_password, :aliases => '-p', :type => :string, :desc => 'master_user_password', :required => true
  method_option :db_instance_class, :type => :string, :desc => 'db_instance_class' # "db.m1.large"
  method_option :multi_az, :type => :boolean, :desc => 'multi_az' # true
  method_option :auto_mirror_version_upgrade, :type => :boolean, :desc => 'auto_mirror_version_upgrade' # false
  method_option :db_security_groups, :type => :array, :desc => 'db_security_groups' # "default"
  def create_db_instance
    params = options.dup
    params.delete(:aws_id)
    params.delete(:master_username)
    params.delete(:master_user_password)
    dump(RDS.create_db_instance(options[:aws_id], options[:master_username], options[:master_user_password], params))
  end

  desc 'modify_db_instance', 'modify_db_instance'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  method_option :master_user_password, :aliases => '-p', :type => :string, :desc => 'master_user_password'
  method_option :instance_class, :type => :string, :desc => 'instance_class' # "db.m1.large"
  method_option :preferred_maintenance_window, :type => :string # => 'sun:06:00-sun:10:00',
  method_option :backup_retention_period, :type => :numeric # => 2
  method_option :preferred_backup_window, :type => :string # => '02:00-04:00',
  method_option :allocated_storage, :type => :numeric # => 30
  method_option :multi_az, :type => :boolean, :desc => 'multi_az' # true
  method_option :engine_version, :type => :string, :desc => 'engine_version'
  method_option :auto_minor_version_upgrade, :type => :boolean # => true,
  method_option :allow_major_version_upgrade, :type => :boolean # => true,
  method_option :apply_immediately, :type => :boolean # => true,
  method_option :db_security_groups, :type => :array, :desc => 'db_security_groups' # "default"
  method_option :db_parameter_group, :type => :array, :desc => 'db_parameter_group' # "default"
  def modify_db_instance
    params = options.dup
    params.delete(:aws_id)
    dump(RDS.modify_db_instance(options[:aws_id], params))
  end

  desc 'reboot_db_instance', 'reboot_db_instance'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  def reboot_db_instance
    params = options.dup
    params.delete(:aws_id)
    dump(RDS.reboot_db_instance(options[:aws_id], params))
  end

  desc 'delete_db_instance', 'delete_db_instance'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  def delete_db_instance
    params = options.dup
    params.delete(:aws_id)
    dump(RDS.delete_db_instance(options[:aws_id], params))
  end

  # --------------------------------------------
  #  DB SecurityGroups
  # --------------------------------------------

  desc 'describe_db_security_groups', 'describe_db_security_groups'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name'
  def describe_db_security_groups
    dump(RDS.describe_db_security_groups(options[:db_security_group_name]))
  end

  desc 'create_db_security_group', 'create_db_security_group'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  method_option :db_security_group_description, :aliases => '-d', :type => :string, :desc => 'db_security_group_description', :required => true
  def create_db_security_group
    dump(RDS.create_db_security_group(options[:db_security_group_name], options[:db_security_group_description]))
  end

  # [memo] no need to implement this method in this program.
  # def modify_db_security_group_ingress(action, db_security_group_name, params={}) # :nodoc:
  # end

  desc 'authorize_db_security_group_ingress', 'authorize_db_security_group_ingress'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  # pattern#1
  method_option :cidrip, :type => :string, :desc => 'cidrip'
  # pattern#2
  method_option :ec2_security_group_owner, :type => :numeric, :desc => 'ec2_security_group_owner'
  method_option :ec2_security_group_name, :type => :string, :desc => 'ec2_security_group_name'
  def authorize_db_security_group_ingress
    if (options[:cidrip] and options[:ec2_security_group_owner].nil? and options[:ec2_security_group_owner].nil?)
      # pattern #1
      dump(RDS.authorize_db_security_group_ingress(options[:db_security_group_name], :cidrip => options[:cidrip]))
    elsif (options[:cidrip].nil? and options[:ec2_security_group_owner] and options[:ec2_security_group_name])
      # pattern #2
      dump(RDS.authorize_db_security_group_ingress(options[:db_security_group_name],
                                                   :ec2_security_group_owner => options[:ec2_security_group_owner],
                                                   :ec2_security_group_name  => options[:ec2_security_group_name]))
    else
      raise "no mutch pattern"
    end
  end

  desc 'revoke_db_security_group_ingress', 'revoke_db_security_group_ingress'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  # pattern#1
  method_option :cidrip, :type => :string, :desc => 'cidrip'
  # pattern#2
  method_option :ec2_security_group_owner, :type => :numeric, :desc => 'ec2_security_group_owner'
  method_option :ec2_security_group_name, :type => :string, :desc => 'ec2_security_group_name'
  def revoke_db_security_group_ingress
    if (options[:cidrip] and options[:ec2_security_group_owner].nil? and options[:ec2_security_group_owner].nil?)
      # pattern #1
      dump(RDS.revoke_db_security_group_ingress(options[:db_security_group_name], :cidrip => options[:cidrip]))
    elsif (options[:cidrip].nil? and options[:ec2_security_group_owner] and options[:ec2_security_group_name])
      # pattern #2
      dump(RDS.revoke_db_security_group_ingress(options[:db_security_group_name],
                                                :ec2_security_group_owner => options[:ec2_security_group_owner],
                                                :ec2_security_group_name  => options[:ec2_security_group_name]))
    else
      raise "no mutch pattern"
    end
  end

  desc 'delete_db_security_group', 'delete_db_security_group'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name'
  def delete_db_security_group
    dump(RDS.delete_db_security_group(options[:db_security_group_name]))
  end

  # --------------------------------------------
  #  DB ParameterGroups
  # --------------------------------------------

  desc 'describe_db_parameter_groups', 'describe db parameter groups'
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name'
  def describe_db_parameter_groups
    dump(RDS.describe_db_parameter_groups(options[:db_parameter_group_name]))
  end

  desc 'create_db_parameter_group', 'create_db_parameter_group'
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  method_option :db_parameter_group_description, :aliases => '-d', :type => :string, :desc => 'db_parameter_group_description', :required => true
  def create_db_parameter_group
    params = options.dup
    params.delete(:db_parameter_group_name)
    params.delete(:db_parameter_group_description)
    dump(RDS.create_db_parameter_group(options[:db_parameter_group_name], options[:db_parameter_group_description]))
  end

  desc 'modify_db_parameter_group', 'modify_db_parameter_group'
  method_option :db_security_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
#  method_option :allow-suspicious-udfs, :type => :string, :desc => "allow-suspicious-udfs"
  method_option :auto_increment_increment, :type => :string, :desc => "auto_increment_increment"
  method_option :auto_increment_offset, :type => :string, :desc => "auto_increment_offset"
  method_option :automatic_sp_privileges, :type => :string, :desc => "automatic_sp_privileges"
  method_option :back_log, :type => :string, :desc => "back_log"
  method_option :basedir, :type => :string, :desc => "basedir"
  method_option :binlog_cache_size, :type => :string, :desc => "binlog_cache_size"
  method_option :binlog_format, :type => :string, :desc => "binlog_format"
  method_option :bulk_insert_buffer_size, :type => :string, :desc => "bulk_insert_buffer_size"
#  method_option :character-set-client-handshake, :type => :string, :desc => "character-set-client-handshake"
  method_option :character_set_client, :type => :string, :desc => "character_set_client"
  method_option :character_set_connection, :type => :string, :desc => "character_set_connection"
  method_option :character_set_database, :type => :string, :desc => "character_set_database"
  method_option :character_set_filesystem, :type => :string, :desc => "character_set_filesystem"
  method_option :character_set_results, :type => :string, :desc => "character_set_results"
  method_option :character_set_server, :type => :string, :desc => "character_set_server"
  method_option :collation_connection, :type => :string, :desc => "collation_connection"
  method_option :collation_server, :type => :string, :desc => "collation_server"
  method_option :completion_type, :type => :string, :desc => "completion_type"
  method_option :concurrent_insert, :type => :string, :desc => "concurrent_insert"
  method_option :connect_timeout, :type => :string, :desc => "connect_timeout"
  method_option :datadir, :type => :string, :desc => "datadir"
  method_option :default_storage_engine, :type => :string, :desc => "default_storage_engine"
  method_option :default_time_zone, :type => :string, :desc => "default_time_zone"
  method_option :default_week_format, :type => :string, :desc => "default_week_format"
  method_option :delay_key_write, :type => :string, :desc => "delay_key_write"
  method_option :delayed_insert_limit, :type => :string, :desc => "delayed_insert_limit"
  method_option :delayed_insert_timeout, :type => :string, :desc => "delayed_insert_timeout"
  method_option :delayed_queue_size, :type => :string, :desc => "delayed_queue_size"
  method_option :div_precision_increment, :type => :string, :desc => "div_precision_increment"
  method_option :event_scheduler, :type => :string, :desc => "event_scheduler"
  method_option :flush, :type => :string, :desc => "flush"
  method_option :flush_time, :type => :string, :desc => "flush_time"
  method_option :ft_boolean_syntax, :type => :string, :desc => "ft_boolean_syntax"
  method_option :ft_max_word_len, :type => :string, :desc => "ft_max_word_len"
  method_option :ft_min_word_len, :type => :string, :desc => "ft_min_word_len"
  method_option :ft_query_expansion_limit, :type => :string, :desc => "ft_query_expansion_limit"
  method_option :general_log, :type => :string, :desc => "general_log"
  method_option :group_concat_max_len, :type => :string, :desc => "group_concat_max_len"
  method_option :ignore_builtin_innodb, :type => :string, :desc => "ignore_builtin_innodb"
  method_option :init_connect, :type => :string, :desc => "init_connect"
  method_option :innodb_adaptive_flushing, :type => :string, :desc => "innodb_adaptive_flushing"
  method_option :innodb_adaptive_hash_index, :type => :string, :desc => "innodb_adaptive_hash_index"
  method_option :innodb_additional_mem_pool_size, :type => :string, :desc => "innodb_additional_mem_pool_size"
  method_option :innodb_autoextend_increment, :type => :string, :desc => "innodb_autoextend_increment"
  method_option :innodb_autoinc_lock_mode, :type => :string, :desc => "innodb_autoinc_lock_mode"
  method_option :innodb_buffer_pool_size, :type => :string, :desc => "innodb_buffer_pool_size"
  method_option :innodb_change_buffering, :type => :string, :desc => "innodb_change_buffering"
  method_option :innodb_commit_concurrency, :type => :string, :desc => "innodb_commit_concurrency"
  method_option :innodb_concurrency_tickets, :type => :string, :desc => "innodb_concurrency_tickets"
  method_option :innodb_data_home_dir, :type => :string, :desc => "innodb_data_home_dir"
  method_option :innodb_file_format, :type => :string, :desc => "innodb_file_format"
  method_option :innodb_file_per_table, :type => :string, :desc => "innodb_file_per_table"
  method_option :innodb_flush_log_at_trx_commit, :type => :string, :desc => "innodb_flush_log_at_trx_commit"
  method_option :innodb_flush_method, :type => :string, :desc => "innodb_flush_method"
  method_option :innodb_io_capacity, :type => :string, :desc => "innodb_io_capacity"
  method_option :innodb_lock_wait_timeout, :type => :string, :desc => "innodb_lock_wait_timeout"
  method_option :innodb_locks_unsafe_for_binlog, :type => :string, :desc => "innodb_locks_unsafe_for_binlog"
  method_option :innodb_log_buffer_size, :type => :string, :desc => "innodb_log_buffer_size"
  method_option :innodb_log_file_size, :type => :string, :desc => "innodb_log_file_size"
  method_option :innodb_log_group_home_dir, :type => :string, :desc => "innodb_log_group_home_dir"
  method_option :innodb_max_dirty_pages_pct, :type => :string, :desc => "innodb_max_dirty_pages_pct"
  method_option :innodb_max_purge_lag, :type => :string, :desc => "innodb_max_purge_lag"
  method_option :innodb_old_blocks_pct, :type => :string, :desc => "innodb_old_blocks_pct"
  method_option :innodb_old_blocks_time, :type => :string, :desc => "innodb_old_blocks_time"
  method_option :innodb_open_files, :type => :string, :desc => "innodb_open_files"
  method_option :innodb_read_ahead_threshold, :type => :string, :desc => "innodb_read_ahead_threshold"
  method_option :innodb_read_io_threads, :type => :string, :desc => "innodb_read_io_threads"
  method_option :innodb_replication_delay, :type => :string, :desc => "innodb_replication_delay"
  method_option :innodb_rollback_on_timeout, :type => :string, :desc => "innodb_rollback_on_timeout"
  method_option :innodb_spin_wait_delay, :type => :string, :desc => "innodb_spin_wait_delay"
  method_option :innodb_stats_on_metadata, :type => :string, :desc => "innodb_stats_on_metadata"
  method_option :innodb_stats_sample_pages, :type => :string, :desc => "innodb_stats_sample_pages"
  method_option :innodb_strict_mode, :type => :string, :desc => "innodb_strict_mode"
  method_option :innodb_support_xa, :type => :string, :desc => "innodb_support_xa"
  method_option :innodb_sync_spin_loops, :type => :string, :desc => "innodb_sync_spin_loops"
  method_option :innodb_table_locks, :type => :string, :desc => "innodb_table_locks"
  method_option :innodb_thread_concurrency, :type => :string, :desc => "innodb_thread_concurrency"
  method_option :innodb_thread_sleep_delay, :type => :string, :desc => "innodb_thread_sleep_delay"
  method_option :innodb_use_legacy_cardinality_algorithm, :type => :string, :desc => "innodb_use_legacy_cardinality_algorithm"
  method_option :innodb_use_sys_malloc, :type => :string, :desc => "innodb_use_sys_malloc"
  method_option :innodb_write_io_threads, :type => :string, :desc => "innodb_write_io_threads"
  method_option :interactive_timeout, :type => :string, :desc => "interactive_timeout"
  method_option :join_buffer_size, :type => :string, :desc => "join_buffer_size"
  method_option :keep_files_on_create, :type => :string, :desc => "keep_files_on_create"
  method_option :key_buffer_size, :type => :string, :desc => "key_buffer_size"
  method_option :key_cache_age_threshold, :type => :string, :desc => "key_cache_age_threshold"
  method_option :key_cache_block_size, :type => :string, :desc => "key_cache_block_size"
  method_option :key_cache_division_limit, :type => :string, :desc => "key_cache_division_limit"
  method_option :language, :type => :string, :desc => "language"
  method_option :lc_time_names, :type => :string, :desc => "lc_time_names"
  method_option :local_infile, :type => :string, :desc => "local_infile"
#  method_option :log-bin, :type => :string, :desc => "log-bin"
  method_option :log_bin_trust_function_creators, :type => :string, :desc => "log_bin_trust_function_creators"
  method_option :log_error, :type => :string, :desc => "log_error"
  method_option :log_output, :type => :string, :desc => "log_output"
  method_option :log_warnings, :type => :string, :desc => "log_warnings"
  method_option :long_query_time, :type => :string, :desc => "long_query_time"
  method_option :low_priority_updates, :type => :string, :desc => "low_priority_updates"
  method_option :lower_case_table_names, :type => :string, :desc => "lower_case_table_names"
  method_option :max_allowed_packet, :type => :string, :desc => "max_allowed_packet"
  method_option :max_binlog_cache_size, :type => :string, :desc => "max_binlog_cache_size"
  method_option :max_binlog_size, :type => :string, :desc => "max_binlog_size"
  method_option :max_connect_errors, :type => :string, :desc => "max_connect_errors"
  method_option :max_connections, :type => :string, :desc => "max_connections"
  method_option :max_delayed_threads, :type => :string, :desc => "max_delayed_threads"
  method_option :max_error_count, :type => :string, :desc => "max_error_count"
  method_option :max_heap_table_size, :type => :string, :desc => "max_heap_table_size"
  method_option :max_insert_delayed_threads, :type => :string, :desc => "max_insert_delayed_threads"
  method_option :max_join_size, :type => :string, :desc => "max_join_size"
  method_option :max_length_for_sort_data, :type => :string, :desc => "max_length_for_sort_data"
  method_option :max_prepared_stmt_count, :type => :string, :desc => "max_prepared_stmt_count"
  method_option :max_seeks_for_key, :type => :string, :desc => "max_seeks_for_key"
  method_option :max_sort_length, :type => :string, :desc => "max_sort_length"
  method_option :max_sp_recursion_depth, :type => :string, :desc => "max_sp_recursion_depth"
  method_option :max_tmp_tables, :type => :string, :desc => "max_tmp_tables"
  method_option :max_user_connections, :type => :string, :desc => "max_user_connections"
  method_option :max_write_lock_count, :type => :string, :desc => "max_write_lock_count"
  method_option :min_examined_row_limit, :type => :string, :desc => "min_examined_row_limit"
  method_option :myisam_data_pointer_size, :type => :string, :desc => "myisam_data_pointer_size"
  method_option :myisam_max_sort_file_size, :type => :string, :desc => "myisam_max_sort_file_size"
  method_option :myisam_sort_buffer_size, :type => :string, :desc => "myisam_sort_buffer_size"
  method_option :myisam_stats_method, :type => :string, :desc => "myisam_stats_method"
  method_option :myisam_use_mmap, :type => :string, :desc => "myisam_use_mmap"
  method_option :net_buffer_length, :type => :string, :desc => "net_buffer_length"
  method_option :net_read_timeout, :type => :string, :desc => "net_read_timeout"
  method_option :net_retry_count, :type => :string, :desc => "net_retry_count"
  method_option :net_write_timeout, :type => :string, :desc => "net_write_timeout"
#  method_option :old-style-user-limits, :type => :string, :desc => "old-style-user-limits"
  method_option :old_passwords, :type => :string, :desc => "old_passwords"
  method_option :optimizer_prune_level, :type => :string, :desc => "optimizer_prune_level"
  method_option :optimizer_search_depth, :type => :string, :desc => "optimizer_search_depth"
  method_option :optimizer_switch, :type => :string, :desc => "optimizer_switch"
  method_option :pid_file, :type => :string, :desc => "pid_file"
#  method_option :plugin-load, :type => :string, :desc => "plugin-load"
  method_option :plugin_dir, :type => :string, :desc => "plugin_dir"
  method_option :port, :type => :string, :desc => "port"
  method_option :preload_buffer_size, :type => :string, :desc => "preload_buffer_size"
  method_option :profiling_history_size, :type => :string, :desc => "profiling_history_size"
  method_option :query_alloc_block_size, :type => :string, :desc => "query_alloc_block_size"
  method_option :query_cache_limit, :type => :string, :desc => "query_cache_limit"
  method_option :query_cache_min_res_unit, :type => :string, :desc => "query_cache_min_res_unit"
  method_option :query_cache_size, :type => :string, :desc => "query_cache_size"
  method_option :query_cache_type, :type => :string, :desc => "query_cache_type"
  method_option :query_cache_wlock_invalidate, :type => :string, :desc => "query_cache_wlock_invalidate"
  method_option :query_prealloc_size, :type => :string, :desc => "query_prealloc_size"
  method_option :range_alloc_block_size, :type => :string, :desc => "range_alloc_block_size"
  method_option :read_buffer_size, :type => :string, :desc => "read_buffer_size"
  method_option :read_only, :type => :string, :desc => "read_only"
  method_option :read_rnd_buffer_size, :type => :string, :desc => "read_rnd_buffer_size"
#  method_option :relay-log, :type => :string, :desc => "relay-log"
#  method_option :safe-user-create, :type => :string, :desc => "safe-user-create"
  method_option :secure_auth, :type => :string, :desc => "secure_auth"
  method_option :secure_file_priv, :type => :string, :desc => "secure_file_priv"
  method_option :server_id, :type => :string, :desc => "server_id"
#  method_option :skip-character-set-client-handshake, :type => :string, :desc => "skip-character-set-client-handshake"
  method_option :skip_external_locking, :type => :string, :desc => "skip_external_locking"
  method_option :skip_name_resolve, :type => :string, :desc => "skip_name_resolve"
  method_option :skip_show_database, :type => :string, :desc => "skip_show_database"
  method_option :slow_launch_time, :type => :string, :desc => "slow_launch_time"
  method_option :slow_query_log, :type => :string, :desc => "slow_query_log"
  method_option :socket, :type => :string, :desc => "socket"
  method_option :sort_buffer_size, :type => :string, :desc => "sort_buffer_size"
  method_option :sql_mode, :type => :string, :desc => "sql_mode"
  method_option :sql_select_limit, :type => :string, :desc => "sql_select_limit"
  method_option :sync_binlog, :type => :string, :desc => "sync_binlog"
  method_option :sync_frm, :type => :string, :desc => "sync_frm"
#  method_option :sysdate-is-now, :type => :string, :desc => "sysdate-is-now"
  method_option :table_definition_cache, :type => :string, :desc => "table_definition_cache"
  method_option :table_open_cache, :type => :string, :desc => "table_open_cache"
#  method_option :temp-pool, :type => :string, :desc => "temp-pool"
  method_option :thread_cache_size, :type => :string, :desc => "thread_cache_size"
  method_option :thread_stack, :type => :string, :desc => "thread_stack"
  method_option :timed_mutexes, :type => :string, :desc => "timed_mutexes"
  method_option :tmp_table_size, :type => :string, :desc => "tmp_table_size"
  method_option :tmpdir, :type => :string, :desc => "tmpdir"
  method_option :transaction_alloc_block_size, :type => :string, :desc => "transaction_alloc_block_size"
  method_option :transaction_prealloc_size, :type => :string, :desc => "transaction_prealloc_size"
  method_option :tx_isolation, :type => :string, :desc => "tx_isolation"
  method_option :updatable_views_with_limit, :type => :string, :desc => "updatable_views_with_limit"
  method_option :wait_timeout, :type => :string, :desc => "wait_timeout"
  def modify_db_parameter_group
    params = options.dup
    params.delete(:db_security_group_name)
    dump(RDS.modify_db_parameter_group(options[:db_security_group_name], params))
  end

  desc 'delete_db_parameter_group', 'delete_db_parameter_group'
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  def delete_db_parameter_group
    dump(RDS.delete_db_parameter_group(options[:db_parameter_group_name]))
  end

  desc 'reset_db_parameter_group', 'reset_db_parameter_group'
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  def reset_db_parameter_group
    dump(RDS.reset_db_parameter_group(options[:db_parameter_group_name], :all))
  end

  desc 'describe_db_parameters', 'describe_db_parameters'
  method_option :db_parameter_group_name, :aliases => '-n', :type => :string, :desc => 'db_security_group_name', :required => true
  def describe_db_parameters
    dump(RDS.describe_db_parameters(options[:db_parameter_group_name]))
  end

  desc 'describe_engine_default_parameters', 'describe_engine_default_parameters'
  method_option :db_parameter_group_family, :aliases => '-f', :type => :string, :desc => 'db_parameter_group_family'
  def describe_engine_default_parameters
    if options[:db_parameter_group_family].nil?
      dump(RDS.describe_engine_default_parameters)
    else
      dump(RDS.describe_engine_default_parameters(options[:db_parameter_group_family]))
    end
  end


  # --------------------------------------------
  #  DB Snapshots
  # --------------------------------------------

  desc 'describe_db_snapshots', 'describe_db_snapshots'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'instance id'
  def describe_db_snapshots
    dump(RDS.describe_db_snapshots(options[:aws_id]))
  end

  desc 'create_db_snapshot', 'create_db_snapshot'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  method_option :instance_aws_id, :type => :string, :desc => 'instance_aws_id', :required => true
  def create_db_snapshot
    pp dump(RDS.create_db_snapshot(options[:aws_id], options[:instance_aws_id]))
  end

  desc 'restore_db_instance_from_db_snapshot', 'restore_db_instance_from_db_snapshot'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'snapshot aws_id', :required => true
  method_option :instance_aws_id, :type => :string, :desc => 'instance_aws_id', :required => true
  method_option :db_instance_class, :type => :string, :desc => 'db_instance_class' # "db.m1.large"
  method_option :endpoint_port, :type => :string, :desc => 'endpoint_port'
  method_option :availability_zone, :type => :string, :desc => 'availability_zone'
  method_option :multi_az, :type => :boolean, :desc => 'multi_az' # true
  method_option :auto_mirror_version_upgrade, :type => :boolean, :desc => 'auto_mirror_version_upgrade' # false
  def restore_db_instance_from_db_snapshot
    params = options.dup
    params.delete(:aws_id)
    params.delete(:new_instance_aws_id)
    dump(RDS.restore_db_instance_from_db_snapshot(options[:aws_id], options[:instance_aws_id], params))
  end

  desc 'restore_db_instance_to_point_in_time', 'restore_db_instance_to_point_in_time'
  method_option :instance_aws_id, :type => :string, :desc => 'instance_aws_id', :required => true
  method_option :new_instance_aws_id, :type => :string, :desc => 'new_instance_aws_id', :required => true
  method_option :use_latest_restorable_time, :type => :string, :desc => 'use_latest_restorable_time'
  method_option :restore_time, :type => :string, :desc => 'restore_time'
  method_option :instance_class, :type => :string, :desc => 'instance_class'
  method_option :multi_az, :type => :string, :desc => 'multi_az'
  method_option :endpoint_port, :type => :string, :desc => 'endpoint_port'
  method_option :availability_zone, :type => :string, :desc => 'availability_zone'
  method_option :auto_minor_version_upgrade, :type => :string, :desc => 'auto_minor_version_upgrade'
  def restore_db_instance_to_point_in_time
    params = options.dup
    params.delete(:instance_aws_id)
    params.delete(:new_instance_aws_id)
    dump(RDS.restore_db_instance_to_point_in_time(options[:instance_aws_id], options[:new_instance_aws_id], params))
  end

  desc 'delete_db_snapshot', 'delete_db_snapshot'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  def delete_db_snapshot
    dump(RDS.delete_db_snapshot(options[:aws_id]))
  end


  # --------------------------------------------
  #  DB Events
  # --------------------------------------------

  desc 'describe_events', 'describe_events'
  def describe_events
    dump(RDS.describe_events)
  end

  # --------------------------------------------
  #  DB Engine Versions
  # --------------------------------------------

  desc 'describe_db_engine_versions', 'describe_db_engine_versions'
  def describe_db_engine_versions
    dump(RDS.describe_db_engine_versions)
  end


  # --------------------------------------------
  #  DB Replicas
  # --------------------------------------------

  desc 'create_db_instance_read_replica', 'create_db_instance_read_replica'
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id', :required => true
  method_option :source_db_instance_identifier, :type => :string, :desc => 'source_db_instance_identifier', :required => true
  method_option :endpoint_port, :type => :string, :desc => 'endpoint_port'
  method_option :availability_zone, :type => :string, :desc => 'availability_zone'
  method_option :db_instance_class, :type => :string, :desc => 'db_instance_class' # "db.m1.large"
  method_option :auto_mirror_version_upgrade, :type => :boolean, :desc => 'auto_mirror_version_upgrade' # false
  def create_db_instance_read_replica
    params = options.dup
    params.delete(:aws_id)
    params.delete(:source_db_instance_identifier)
    # [TODO] not yet tested
    dump(RDS.create_db_instance_read_replica(options[:aws_id], options[:source_db_instance_identifier], params))
  end

  #---------------------------------------------
  #  Reserved Instances
  #---------------------------------------------

  desc 'describe_reserved_db_instances_offerings', 'describe_reserved_db_instances_offerings'
  def describe_reserved_db_instances_offerings
    dump(RDS.describe_reserved_db_instances_offerings)
  end

  desc 'describe_reserved_db_instances', 'describe_reserved_db_instances'
  def describe_reserved_db_instances
    dump(RDS.describe_reserved_db_instances)
  end

  desc 'purchase_reserved_db_instances_offering', 'purchase_reserved_db_instances_offering'
  method_option :offering_aws_id, :type => :string, :desc => 'offering_aws_id', :required => true
  method_option :aws_id, :aliases => '-i', :type => :string, :desc => 'aws_id'
  method_option :count, :aliases => '-c', :type => :numeric, :desc => 'count'
  def purchase_reserved_db_instances_offering
    params = options.dup
    params.delete(:offering_aws_id)
    # [TODO] not yet tested
    dump(RDS.purchase_reserved_db_instances_offering(options[:offering_aws_id], params))
  end

  private
  def dump(hash)
    #hash.each { |item| pp item }
    pp hash
  end
end

Rdsadmin.start
